==== Kernel configuration

1. Enable omap2+ dss subsystem:

Device drivers
    Graphics support
        OMAP2+ Display Subsystem support
            DPI support && VENC support && OMAP2+ frame buffer support ...

2. Enable omap2+ framebuffer

Device drivers
    Graphics support
        OMAP2+ Display Subsystem support
            OMAP2+ frame buffer support ...
                Number of framebuffers

3. Display device drivers

Device drivers
    Graphics support
        OMAP2+ Display Subsystem support
            OMAP2/3 Display Device Drivers
                Generic DPI Panel && DVI output

Note:
Some time ago (e.g. in <= 2.6.37) 'Generic Panel' had to be enabled in order to
enable DVI output on Beagleboard. On recent kernels (e.g. >= 3.3) DVI output
on Beagleboard is handled by 'DVI output'.

4. Enable v4l2 display driver
Device drivers
    Multimedia support
        Video capture adapters
            V4L platform devices
                OMAP2/OMAP3 V4L2-Display driver

5. Framebuffers

OMAP3 DSS supports 3 overlays (GFX, VIDEO0, VIDEO1) and 2 displays (LCD/DVI
and TV). So it is possible to set number of framebuffers from 1 to 3. However
if it is planned to use v4l2 display driver than the number of framebuffers
should be less than 3. In this case overlays which are not attached to
framebuffers will be attached to v4l2 devices:

3 = #{framebuffers: /dev/fbX} + #{video devices: /dev/videoX}


==== Kernel command line parameters

Sample kernel params specific to dss subsystem:
    vram=12M omapdss.def_disp=dvi omapfb.mode=dvi:800x480MR-16 omapfb.vram=0:4M,1:4M,2:4M

==== Control knobs in sysfs

==== Test tools

There are two specific utilities that use omap framebuffer: gstreamer plugin
omapfb and omapfbplay player.

== gst-omapfb

Source: http//github.com/felipec/gst-omapfb
Note that gst-omapfb in OpenEmbedded 2011.03-maintenance is supplied with
patch implementing overlay for X. If you plan to use this plugin on OMAP3
device without X then do not apply that patch.

Usage:
    dev# gst-launch videotestsrc ! omapfbsink

Notes:
    - destination framebuffer is hardcoded to 'fb1'

== omapfbplay

Source: http://git.mansr.com/?p=omapfbplay;a=summary

Usage:
    dev# omapfbplay /path/to/videofile
This tool doesn't have any command line help. All the options have to be
figured out from the source code. Here are several examples:

    dev# omapfbplay -d omapfb /path/to/file
        specify omap framebuffer as output device; fb1 framebuffer is
        hardcoded and can't be changed from the command line

    dev# omapfbplay -d v4l2 /path/to/file
    dev# omapfbplay -d v4l2:/dev/video0 /path/to/file
        specify v4l2 video overlay as output device; /dev/video1 is default
        device, but it can be changed as it shown in the second example

    dev# omapfbplay -d v4l2 -t 100,100,500
        specify v4l2 video overlay as output device, then generate test video
        with size 100x100 and length 500 (msec ?)
Notes:


==== Using S-Video on Beagleboard

Lets assume that we have a kernel with old good framebuffers rather than new
shiny drm. Suppose our kernel is configured in such a way that we have two
framebuffer devices /dev/fb[01] and one v4l device /dev/video0.

Boot the kernel with the following parameters:
    UBoot> setenv bootargs 'console=ttyO2,115200 root=/dev/mmcblk0p2 rw rootfstype=ext3 rootwait omapfb.vram=0:4M,1:4M,2:4M'

Use dss entries in sysfs to configure proper display output.

Disable displays:
    dev# echo 0 > /sys/devices/platform/omapdss/display0/enabled
    dev# echo 0 > /sys/devices/platform/omapdss/display1/enabled

Disable overlays:
    dev# echo 0 > /sys/devices/platform/omapdss/overlay0/enabled
    dev# echo 0 > /sys/devices/platform/omapdss/overlay1/enabled
    dev# echo 0 > /sys/devices/platform/omapdss/overlay2/enabled

Set lcd manager for overlay0:
    dev# echo 'lcd' > /sys/devices/platform/omapdss/overlay0/manager

Set tv manager for overlay0 and overlay1:
    dev# echo 'tv' > /sys/devices/platform/omapdss/overlay1/manager
    dev# echo 'tv' > /sys/devices/platform/omapdss/overlay2/manager

Set any reasonable resolution on dvi display:
    dev# fbset -fb /dev/fb0 -g 1024 768 1024 768 32
    dev# fbset -fb /dev/fb0
    mode "1024x768-93"
        # D: 108.003 MHz, H: 75.421 kHz, V: 93.112 Hz
        geometry 1024 768 1024 768 32
        timings 9259 248 48 38 1 112 3
        hsync high
        vsync high
        rgba 8/16,8/8,8/0,0/0
    endmode

#if WANT_PAL_RESOLUTION_ON_TV:

    Set PAL resolution for tv output:
        dev# echo "720x574" > /sys/devices/platform/omapdss/overlay1/output_size

    Set PAL resolution for tv display:
        dev# fbset -fb /dev/fb1 -xres 720 -yres 574 -vxres 720 -vyres 574
        dev# fbset -fb /dev/fb1
        mode "720x574-50"
            # D: 13.500 MHz, H: 15.625 kHz, V: 50.000 Hz
            geometry 720 574 720 574 32
            timings 74074 68 12 41 5 64 5
            hsync high
            vsync high
            laced true
            rgba 8/16,8/8,8/0,0/0
        endmode
#else /* WANT_NTSC_RESOLUTION_ON_TV */

    Set NTSC resolution for tv output:
        dev# echo "720x482" > /sys/devices/platform/omapdss/overlay1/output_size

    Set NTSC resolution for tv display:
        dev# fbset -fb /dev/fb0 -xres 720 -yres 482 -vxres 720 -vyres 482
        dev# fbset -fb /dev/fb1
        mode "720x482-59"
            # D: 13.500 MHz, H: 15.625 kHz, V: 58.630 Hz
            geometry 720 482 720 482 32
            timings 74074 68 12 41 5 64 5
            hsync high
            vsync high
            laced true
            rgba 8/16,8/8,8/0,0/0
        endmode

#endif

Enable displays:
    dev# echo 1 > /sys/devices/platform/omapdss/display0/enabled
    dev# echo 1 > /sys/devices/platform/omapdss/display1/enabled

Enable overlays:
    dev# echo 1 > /sys/devices/platform/omapdss/overlay0/enabled
    dev# echo 1 > /sys/devices/platform/omapdss/overlay1/enabled

/* vim: set filetype=esys : */
